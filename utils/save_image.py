import os
import io
import json
import logging
from datetime import datetime
from typing import Optional, Dict, Any
from PIL import Image, ImageDraw, ImageFont
import hashlib
import re

logger = logging.getLogger(__name__)

class ImageSaver:
    def __init__(self, output_dir: str = "output"):
        self.output_dir = output_dir
        self.metadata_file = os.path.join(output_dir, "metadata.json")
        self.ensure_output_dir()
        self.load_metadata()
    
    def ensure_output_dir(self):
        """التأكد من وجود مجلد الإخراج"""
        if not os.path.exists(self.output_dir):
            os.makedirs(self.output_dir)
            logger.info(f"تم إنشاء مجلد الإخراج: {self.output_dir}")
    
    def load_metadata(self):
        """تحميل بيانات الصور المحفوظة"""
        try:
            if os.path.exists(self.metadata_file):
                with open(self.metadata_file, 'r', encoding='utf-8') as f:
                    self.metadata = json.load(f)
            else:
                self.metadata = {}
        except Exception as e:
            logger.error(f"خطأ في تحميل البيانات الوصفية: {str(e)}")
            self.metadata = {}
    
    def save_metadata(self):
        """حفظ البيانات الوصفية"""
        try:
            with open(self.metadata_file, 'w', encoding='utf-8') as f:
                json.dump(self.metadata, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"خطأ في حفظ البيانات الوصفية: {str(e)}")
    
    async def save_image(
        self, 
        image_data: bytes, 
        prompt: str, 
        image_id: str,
        add_watermark: bool = True,
        save_metadata: bool = True
    ) -> Optional[str]:
        """
        حفظ الصورة مع البيانات الوصفية
        """
        try:
            # تحويل البيانات إلى صورة
            image = Image.open(io.BytesIO(image_data))
            
            # إنشاء اسم الملف
            filename = self._generate_filename(prompt, image_id)
            filepath = os.path.join(self.output_dir, filename)
            
            # إضافة العلامة المائية إذا كان مطلوباً
            if add_watermark:
                image = self._add_watermark(image, prompt)
            
            # حفظ الصورة
            image.save(filepath, format='PNG', quality=95)
            
            # حفظ البيانات الوصفية
            if save_metadata:
                self._save_image_metadata(filename, prompt, image_id, image.size)
            
            logger.info(f"تم حفظ الصورة: {filename}")
            return filename
            
        except Exception as e:
            logger.error(f"خطأ في حفظ الصورة: {str(e)}")
            return None
    
    def _generate_filename(self, prompt: str, image_id: str) -> str:
        """
        إنشاء اسم ملف فريد ووصفي
        """
        # تنظيف الوصف للاستخدام في اسم الملف
        clean_prompt = re.sub(r'[^\w\s-]', '', prompt.strip())
        clean_prompt = re.sub(r'[-\s]+', '_', clean_prompt)
        
        # قطع الوصف إذا كان طويلاً
        if len(clean_prompt) > 50:
            clean_prompt = clean_prompt[:50]
        
        # إضافة التاريخ والوقت
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # إضافة جزء من معرف الصورة
        short_id = image_id[:8]
        
        filename = f"{timestamp}_{clean_prompt}_{short_id}.png"
        
        # التأكد من عدم وجود ملف بنفس الاسم
        counter = 1
        original_filename = filename
        while os.path.exists(os.path.join(self.output_dir, filename)):
            name, ext = os.path.splitext(original_filename)
            filename = f"{name}_{counter}{ext}"
            counter += 1
        
        return filename
    
    def _add_watermark(self, image: Image.Image, prompt: str) -> Image.Image:
        """
        إضافة علامة مائية للصورة
        """
        try:
            # إنشاء نسخة من الصورة
            watermarked = image.copy()
            
            # إنشاء طبقة شفافة للعلامة المائية
            watermark_layer = Image.new('RGBA', watermarked.size, (0, 0, 0, 0))
            draw = ImageDraw.Draw(watermark_layer)
            
            # إعدادات النص
            try:
                # محاولة استخدام خط مخصص
                font = ImageFont.truetype("arial.ttf", 16)
            except:
                # استخدام الخط الافتراضي
                font = ImageFont.load_default()
            
            # نص العلامة المائية
            watermark_text = "Generated by Prompt2Image"
            prompt_text = prompt[:50] + "..." if len(prompt) > 50 else prompt
            
            # حساب موضع النص
            text_width = draw.textlength(watermark_text, font=font)
            text_height = 20
            
            # موضع النص (في الأسفل من اليمين)
            x = watermarked.width - text_width - 10
            y = watermarked.height - text_height - 10
            
            # رسم خلفية شفافة للنص
            draw.rectangle([x-5, y-5, x + text_width + 5, y + text_height + 5], 
                          fill=(0, 0, 0, 128))
            
            # رسم النص
            draw.text((x, y), watermark_text, font=font, fill=(255, 255, 255, 200))
            
            # دمج طبقة العلامة المائية مع الصورة
            watermarked = Image.alpha_composite(watermarked.convert('RGBA'), watermark_layer)
            
            return watermarked.convert('RGB')
            
        except Exception as e:
            logger.error(f"خطأ في إضافة العلامة المائية: {str(e)}")
            return image
    
    def _save_image_metadata(self, filename: str, prompt: str, image_id: str, size: tuple):
        """
        حفظ البيانات الوصفية للصورة
        """
        try:
            metadata = {
                "filename": filename,
                "prompt": prompt,
                "image_id": image_id,
                "size": {"width": size[0], "height": size[1]},
                "created_at": datetime.now().isoformat(),
                "file_hash": self._calculate_file_hash(filename)
            }
            
            self.metadata[image_id] = metadata
            self.save_metadata()
            
        except Exception as e:
            logger.error(f"خطأ في حفظ البيانات الوصفية: {str(e)}")
    
    def _calculate_file_hash(self, filename: str) -> str:
        """
        حساب hash للملف للتحقق من التكامل
        """
        try:
            filepath = os.path.join(self.output_dir, filename)
            with open(filepath, 'rb') as f:
                file_hash = hashlib.md5(f.read()).hexdigest()
            return file_hash
        except Exception as e:
            logger.error(f"خطأ في حساب hash للملف: {str(e)}")
            return ""
    
    def get_image_metadata(self, image_id: str) -> Optional[Dict[str, Any]]:
        """
        الحصول على البيانات الوصفية لصورة معينة
        """
        return self.metadata.get(image_id)
    
    def get_all_metadata(self) -> Dict[str, Any]:
        """
        الحصول على جميع البيانات الوصفية
        """
        return self.metadata
    
    def delete_image(self, image_id: str) -> bool:
        """
        حذف صورة ومعلوماتها
        """
        try:
            if image_id in self.metadata:
                filename = self.metadata[image_id]["filename"]
                filepath = os.path.join(self.output_dir, filename)
                
                # حذف الملف
                if os.path.exists(filepath):
                    os.remove(filepath)
                
                # حذف البيانات الوصفية
                del self.metadata[image_id]
                self.save_metadata()
                
                logger.info(f"تم حذف الصورة: {filename}")
                return True
            else:
                logger.warning(f"الصورة غير موجودة: {image_id}")
                return False
                
        except Exception as e:
            logger.error(f"خطأ في حذف الصورة: {str(e)}")
            return False
    
    def cleanup_old_images(self, days_old: int = 30) -> int:
        """
        حذف الصور القديمة أكثر من عدد الأيام المحدد
        """
        try:
            deleted_count = 0
            current_time = datetime.now()
            
            # نسخ المفاتيح لتجنب تعديل القاموس أثناء التكرار
            image_ids = list(self.metadata.keys())
            
            for image_id in image_ids:
                metadata = self.metadata[image_id]
                created_at = datetime.fromisoformat(metadata["created_at"])
                
                # حساب الفرق في الأيام
                days_diff = (current_time - created_at).days
                
                if days_diff > days_old:
                    if self.delete_image(image_id):
                        deleted_count += 1
            
            logger.info(f"تم حذف {deleted_count} صورة قديمة")
            return deleted_count
            
        except Exception as e:
            logger.error(f"خطأ في تنظيف الصور القديمة: {str(e)}")
            return 0
    
    def get_storage_info(self) -> Dict[str, Any]:
        """
        معلومات عن المساحة المستخدمة
        """
        try:
            total_size = 0
            file_count = 0
            
            for filename in os.listdir(self.output_dir):
                filepath = os.path.join(self.output_dir, filename)
                if os.path.isfile(filepath) and filename.lower().endswith(('.png', '.jpg', '.jpeg')):
                    total_size += os.path.getsize(filepath)
                    file_count += 1
            
            return {
                "total_files": file_count,
                "total_size_bytes": total_size,
                "total_size_mb": round(total_size / (1024 * 1024), 2),
                "average_size_mb": round((total_size / file_count) / (1024 * 1024), 2) if file_count > 0 else 0
            }
            
        except Exception as e:
            logger.error(f"خطأ في الحصول على معلومات التخزين: {str(e)}")
            return {"error": str(e)}